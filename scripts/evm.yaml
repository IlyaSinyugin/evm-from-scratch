STOP:
  hint: ''
  code:
    - STOP
  expect:
    success: true
    stack: []

PUSH:
  hint: 'Read "Program Counter" section of the course learning materials for an example on how to parse the bytecode'
  code:
    - PUSH1 1
  expect:
    stack: [1n]

PUSH2:
  hint: "PUSH2 reads the next 2 bytes, don't forget to properly increment PC"
  code:
    - PUSH2 0x1122
  expect:
    stack: [0x1122n]

PUSH4:
  hint: 'PUSH4 reads the next 4 bytes'
  code:
    - PUSH4 0x11223344
  expect:
    stack: [0x11223344n]

PUSH6:
  hint: 'PUSH6 reads the next 6 bytes. Can you implement all PUSH1...PUSH32 using the same code?'
  code:
    - PUSH6 0x112233445566
  expect:
    stack: [0x112233445566n]

PUSH10:
  hint: 'SIZE = OPCODE - PUSH1 + 1, then transform take the next SIZE bytes, PC += SIZE'
  code:
    - PUSH10 0x112233445566778899aa
  expect:
    stack: [0x112233445566778899aan]

PUSH11:
  hint: 'SIZE = OPCODE - PUSH1 + 1, program.slice(pc + 1, pc + 1 + size)'
  code:
    - PUSH11 0x112233445566778899aabb
  expect:
    stack: [0x112233445566778899aabbn]

PUSH32:
  hint: 'PUSH32 reads the next 32 bytes (256 bits)'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

PUSH (twice):
  hint: 'Note the order of items on the stack. The tests expect the top of the stack to be the first element'
  code:
    - PUSH1 1
    - PUSH1 2
  expect:
    # note the order of items in `expect`: your implementation might keep
    # the items in a reversed order (e.g. in JavaScript `push` appends items
    # to the end of the array)
    stack: [2n, 1n]

POP:
  hint: 'POP removes the top item from the stack and discards it'
  code:
    - PUSH1 1
    - PUSH1 2
    - POP
  expect:
    stack: [1n]

STOP (midway):
  hint: "Note that the `PUSH1 2` didn't execute because the program stops after STOP opcode"
  code:
    - PUSH1 1
    - STOP
    - PUSH1 2
  expect:
    stack: [1n]

ADD:
  hint: 'ADD takes the first 2 items from the stack, adds them together and pushes the result'
  code:
    - PUSH1 0x01
    - PUSH1 0x02
    - ADD
  expect:
    stack: [3n]

ADD (overflow):
  hint: 'EVM operates with uint256, if you add 2 to the max possible value it overflows and wraps around'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - PUSH1 0x02
    - ADD
  expect:
    stack: [1n]

MUL:
  code:
    - PUSH1 0x02
    - PUSH1 0x03
    - MUL
  expect:
    stack: [6n]

MUL (overflow):
  hint: 'All math is performed with implicit [mod 2^256]'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - PUSH1 0x02
    - MUL
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffen]

SUB:
  hint: 'SUB takes the first element from the stack and subtracts the second element from the stack'
  code:
    - PUSH1 0x02
    - PUSH1 0x03
    - SUB
  expect:
    stack: [1n]

SUB (underflow):
  hint: 'Underflow works the same way as overflow, 3 - 2 wraps around and results in MAX_UINT256'
  code:
    - PUSH1 0x03
    - PUSH1 0x02
    - SUB
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

DIV:
  hint: 'DIV takes the first element from the stack and divides it by the second element from the stack'
  code:
    - PUSH1 0x02
    - PUSH1 0x06
    - DIV
  expect:
    stack: [3n]

DIV (whole):
  hint: 'Fraction part of the division is discarded'
  code:
    - PUSH1 0x06
    - PUSH1 0x02
    - DIV
  expect:
    stack: [0n]

DIV (by zero):
  hint: 'In EVM you can divide by zero! Modern Solidity protects from this by adding instructions that check for zero'
  code:
    - PUSH1 0x00
    - PUSH1 0x02
    - DIV
  expect:
    stack: [0n]

MOD:
  hint: '10 mod 3 = 1'
  code:
    - PUSH1 3
    - PUSH1 10
    - MOD
  expect:
    stack: [1n]

MOD (by larger number):
  hint: '5 mod 17 = 5'
  code:
    - PUSH1 17
    - PUSH1 5
    - MOD
  expect:
    stack: [5n]

MOD (by zero):
  hint: 'In EVM you can divide by zero! Modern Solidity protects from this by adding instructions that check for zero'
  code:
    - PUSH1 0
    - PUSH1 2
    - MOD
  expect:
    stack: [0n]

ADDMOD:
  hint: '10 + 10 mod 8 = 4'
  code:
    - PUSH1 8
    - PUSH1 10
    - PUSH1 10
    - ADDMOD
  expect:
    stack: [4n]

ADDMOD (wrapped):
  code:
    - PUSH1 2
    - PUSH1 2
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    - ADDMOD
  expect:
    stack: [1n]

MULMOD:
  hint: '10 * 10 mod 8 = 4'
  code:
    - PUSH1 8
    - PUSH1 10
    - PUSH1 10
    - MULMOD
  expect:
    stack: [4n]

MULMOD (wrapped):
  code:
    - PUSH1 12
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    - MULMOD
  expect:
    stack: [9n]

EXP:
  code:
    - PUSH1 2
    - PUSH1 10
    - EXP
  expect:
    stack: [100n]

SIGNEXTEND (positive):
  hint: 'Read "Negative Numbers" section of the course learning materials. SIGNEXTEND has no effect on "positive" numbers'
  code:
    - PUSH1 0x7F
    - PUSH1 0
    - SIGNEXTEND
  expect:
    stack: [0x7fn]

SIGNEXTEND (negative):
  hint: 'Read "Negative Numbers" section of the course learning materials. The first bit of 0xFF is 1, so it is a negative number and needs to be padded by 1s in front'
  code:
    - PUSH1 0xFF
    - PUSH1 0
    - SIGNEXTEND
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

SDIV:
  hint: 'Read "Negative Numbers" section of the course learning materials. SDIV works like DIV for "positive" numbers'
  code:
    - PUSH1 10
    - PUSH1 10
    - SDIV
  expect:
    stack: [1n]

SDIV (negative):
  hint: 'Read "Negative Numbers" section of the course learning materials. -2 / -1 = 2'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - SDIV
  expect:
    stack: [2n]

SDIV (mix of negative and positive):
  hint: 'Read "Negative Numbers" section of the course learning materials. 10 / -2 = -5'
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - PUSH1 10
    - SDIV
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbn] # -5

SMOD:
  hint: 'Read "Negative Numbers" section of the course learning materials. SMOD works like MOD for "positive" numbers'
  code:
    - PUSH1 3
    - PUSH1 10
    - SMOD
  expect:
    stack: [1n]

SMOD (negative):
  hint: 'Read "Negative Numbers" section of the course learning materials. -10 mod -3 = -1'
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd # -3
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8 # -10
    - SMOD
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffen] # -1

SDIV (by zero):
  hint: 'In EVM you can divide by zero'
  code:
    - PUSH1 0x00
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
    - SDIV
  expect:
    stack: [0n]

SMOD (by zero):
  hint: 'In EVM you can divide by zero'
  code:
    - PUSH1 0x00
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
    - SMOD
  expect:
    stack: [0n]

LT:
  hint: '9 < 10 = true (1)'
  code:
    - PUSH1 10
    - PUSH1 9
    - LT
  expect:
    stack: [1n]

LT (equal):
  hint: '10 < 10 = false (0)'
  code:
    - PUSH1 10
    - PUSH1 10
    - LT
  expect:
    stack: [0n]

LT (greater):
  hint: '11 < 10 = false (0)'
  code:
    - PUSH1 10
    - PUSH1 11
    - LT
  expect:
    stack: [0n]

GT:
  hint: '10 > 9 = true (1)'
  code:
    - PUSH1 9
    - PUSH1 10
    - GT
  expect:
    stack: [1n]

GT (equal):
  hint: '10 > 10 = false (0)'
  code:
    - PUSH1 10
    - PUSH1 10
    - GT
  expect:
    stack: [0n]

GT (less):
  hint: '10 > 11 = false (0)'
  code:
    - PUSH1 11
    - PUSH1 10
    - GT
  expect:
    stack: [0n]

SLT:
  hint: 'Same as LT but treats arguments as signed numbers. -1 < 0 = true (1)'
  code:
    - PUSH1 0
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - SLT
  expect:
    stack: [1n]

SLT (equal):
  hint: 'Same as LT but treats arguments as signed numbers. -1 < -1 = false (0)'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - SLT
  expect:
    stack: [0n]

SLT (greater):
  hint: 'Same as LT but treats arguments as signed numbers. -1 < -1 = false (0)'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - PUSH1 0
    - SLT
  expect:
    stack: [0n]

SGT:
  hint: 'Same as GT but treats arguments as signed numbers. No effect on "positive" numbers: 10 > 9 = true (1)'
  code:
    - PUSH1 9
    - PUSH1 10
    - SGT
  expect:
    stack: [1n]

SGT (equal):
  hint: 'Same as GT but treats arguments as signed numbers. -2 > -2 = false (0)'
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - SGT
  expect:
    stack: [0n]

SGT (greater):
  hint: 'Same as GT but treats arguments as signed numbers. -2 > -3 = true (1)'
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd # -3
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - SGT
  expect:
    stack: [1n]

EQ:
  hint: '10 == 10 = true (1)'
  code:
    - PUSH1 10
    - PUSH1 10
    - EQ
  expect:
    stack: [1n]

EQ (not equal):
  hint: '10 == 9 = false (0)'
  code:
    - PUSH1 9
    - PUSH1 10
    - EQ
  expect:
    stack: [0n]

ISZERO (not zero):
  hint: 'If the top element on the stack is not zero, pushes 0'
  code:
    - PUSH1 9
    - ISZERO
  expect:
    stack: [0n]

ISZERO (zero):
  hint: 'If the top element on the stack is zero, pushes 1'
  code:
    - PUSH1 0
    - ISZERO
  expect:
    stack: [1n]

NOT:
  hint: 'Bitwise NOT operation, flips every bit 1->0, 0->1'
  code:
    - PUSH1 0x0f
    - NOT
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0n]

AND:
  hint: 'Bitwise AND operation of the top 2 items on the stack'
  code:
    - PUSH1 0xe
    - PUSH1 0x3
    - AND
  expect:
    stack: [2n]

OR:
  hint: 'Bitwise OR operation of the top 2 items on the stack'
  code:
    - PUSH1 0xe
    - PUSH1 0x3
    - OR
  expect:
    stack: [0xfn]

XOR:
  hint: 'Bitwise XOR operation of the top 2 items on the stack'
  code:
    - PUSH1 0xf0
    - PUSH1 0x0f
    - XOR
  expect:
    stack: [0xffn]

SHL:
  hint: 'Bitwise shift left, 1 << 1 = 2'
  code:
    - PUSH1 1
    - PUSH1 1
    - SHL
  expect:
    stack: [2n]

SHL (discards):
  hint: 'Bits that end up outside MAX_UINT256 are discarded'
  code:
    - PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000
    - PUSH1 4
    - SHL
  expect:
    stack: [0xf000000000000000000000000000000000000000000000000000000000000000n]

SHL (too large):
  hint: 'When shift amount is too large, returns zero'
  code:
    - PUSH1 1
    - PUSH4 0xFFFFFFFF
    - SHL
  expect:
    stack: [0n]

SHR:
  hint: 'Bitwise shift right, 2 >> 1 = 1'
  code:
    - PUSH1 2
    - PUSH1 1
    - SHR
  expect:
    stack: [1n]

SHR (discards):
  hint: 'Bits that end up outside are discarded'
  code:
    - PUSH1 0xFF
    - PUSH1 4
    - SHR
  expect:
    stack: [0x0fn]

SHR (too large):
  hint: 'When shift amount is too large, returns zero'
  code:
    - PUSH1 1
    - PUSH4 0xFFFFFFFF
    - SHR
  expect:
    stack: [0n]

SAR:
  hint: Like SHR but treats the argument as signed number. No effect on "positive" numbers, 2 >> 1 = 1
  code:
    - PUSH1 2
    - PUSH1 1
    - SAR
  expect:
    stack: [1n]

SAR (fills 1s):
  hint: Note that unlike SHR, it fills the empty space with 1s
  code:
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
    - PUSH1 4
    - SAR
  expect:
    stack: [0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0n]

SAR (too large):
  hint: 'When shift amount is too large and the first bit is 1, fills the whole number with 1s'
  code:
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
    - PUSH4 0xFFFFFFFF
    - SAR
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

SAR (positive, too large):
  hint: 'When shift amount is too large and the first bit is 0, fills the whole number with 0s'
  code:
    - PUSH32 0x0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
    - PUSH4 0xFFFFFFFF
    - SAR
  expect:
    stack: [0x0n]

BYTE:
  hint: 'The value on the stack is treated as 32 bytes, take 31st (counting from the most significant one)'
  code:
    - PUSH1 0xff
    - PUSH1 31
    - BYTE
  expect:
    stack: [0xffn]

BYTE (30th):
  hint: 'The value on the stack is treated as 32 bytes, take 30st (counting from the most significant one)'
  code:
    - PUSH2 0xff00
    - PUSH1 30
    - BYTE
  expect:
    stack: [0xffn]

BYTE (29th):
  hint: 'Try to generalize your code to work with any argument'
  code:
    - PUSH3 0xff0000
    - PUSH1 29
    - BYTE
  expect:
    stack: [0xffn]

BYTE (out of range):
  hint: 'Treat other elements as zeros'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - PUSH1 42
    - BYTE
  expect:
    stack: [0x0n]

DUP1:
  hint: 'Duplicate the first element from the stack and push it onto the stack'
  code:
    - PUSH1 1
    - DUP1
    - ADD
  expect:
    stack: [2n]

DUP3:
  hint: 'Duplicate the 3rd element from the stack and push it onto the stack'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - DUP3
  expect:
    stack: [1n, 3n, 2n, 1n]

DUP5:
  hint: 'Try to implement your code to handle any DUP1...DUP16'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - PUSH1 4 # [4, 3, 2, 1]
    - PUSH1 5 # [5, 4, 3, 2, 1]
    - DUP5
  expect:
    stack: [1n, 5n, 4n, 3n, 2n, 1n]

DUP8:
  hint: 'No seriously try to implement your code to handle any DUP1...DUP16 generically. You can do OPCODE - DUP1 + 1 to learn which item to take from the stack'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - PUSH1 4 # [4, 3, 2, 1]
    - PUSH1 5 # [5, 4, 3, 2, 1]
    - PUSH1 6 # [6, 5, 4, 3, 2, 1]
    - PUSH1 7 # [7, 6, 5, 4, 3, 2, 1]
    - PUSH1 8 # [8, 7, 6, 5, 4, 3, 2, 1]
    - DUP8
  expect:
    stack: [1n, 8n, 7n, 6n, 5n, 4n, 3n, 2n, 1n]

SWAP:
  hint: 'Swap the top item from the stack with the 1st one after that'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - SWAP1 # [1, 2]
  expect:
    stack: [1n, 2n]

SWAP3:
  hint: 'Swap the top item from the stack with the 3rd one after that'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - PUSH1 4 # [4, 3, 2, 1]
    - SWAP3 # [1, 3, 2, 4]
  expect:
    stack: [1n, 3n, 2n, 4n]

SWAP5:
  hint: 'Swap the top item from the stack with the 5th one after that. Try to implement SWAP1..SWAP16 with the same code'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - PUSH1 4 # [4, 3, 2, 1]
    - PUSH1 5 # [5, 4, 3, 2, 1]
    - PUSH1 6 # [6, 5, 4, 3, 2, 1]
    - SWAP5
  expect:
    stack: [1n, 5n, 4n, 3n, 2n, 6n]

SWAP7:
  hint: 'No seriously try to implement your code to handle any SWAP1...SWAP16 generically. You can do OPCODE - SWAP1 + 2 to learn which item to take from the stack'
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - PUSH1 4 # [4, 3, 2, 1]
    - PUSH1 5 # [5, 4, 3, 2, 1]
    - PUSH1 6 # [6, 5, 4, 3, 2, 1]
    - PUSH1 7 # [7, 6, 5, 4, 3, 2, 1]
    - PUSH1 8 # [8, 7, 6, 5, 4, 3, 2, 1]
    - SWAP7
  expect:
    stack: [1n, 7n, 6n, 5n, 4n, 3n, 2n, 8n]

INVALID:
  hint: 'Invalid instruction. Note that your code is expected to return success = false, not throw exceptions'
  code:
    - INVALID
  expect:
    success: false
    stack: []

PC:
  hint: 'Read "Program Counter" section of the course learning materials'
  code:
    - PC
  expect:
    stack: [0n]

PC (more code):
  hint: '`PUSH1 0` is counted as 2 bytes (even though it is a single instruction)'
  code:
    - PUSH1 0 # 2 bytes
    - POP # 1 byte
    - PC
  expect:
    stack: [3n]

GAS:
  hint: 'In this version of the tests, GAS is not supported yet and is always expected to return MAX_UINT256'
  code:
    - GAS
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

JUMP:
  hint: 'Set the Program Counter (PC) to the top value from the stack'
  code:
    - PUSH1 5
    - JUMP
    - PUSH1 1
    - JUMPDEST # location 5
    - PUSH1 2
  expect:
    stack: [2n] # 1 is never on the stack

JUMP (not JUMPDEST):
  hint: 'Offset 4 is not a valid JUMPDEST instruction'
  code:
    - PUSH1 3
    - JUMP
    - PUSH1 1
  expect:
    success: false
    stack: []

JUMP (bad instruction boundry):
  hint: 'See "9.4.3. Jump Destination Validity" of the Yellow Paper https://ethereum.github.io/yellowpaper/paper.pdf'
  code:
    - PUSH1 4
    - JUMP
    - PUSH1 0x5b
    - PUSH1 0xff
  expect:
    success: false
    stack: []

JUMPI (no jump):
  hint: 'Conditional JUMP, second argument is 0, not jumping'
  code:
    - PUSH1 0
    - PUSH1 7
    - JUMPI
    - PUSH1 1
    - JUMPDEST
    - PUSH1 2
    - POP
  expect:
    stack: [1n]

JUMPI (jump):
  hint: 'Conditional JUMP, second argument is not 0, jumping'
  code:
    - PUSH1 1
    - PUSH1 7
    - JUMPI
    - PUSH1 1
    - JUMPDEST
    - PUSH1 2
  expect:
    stack: [2n]

MSTORE:
  hint: 'Read "Memory" section of the course learning materials before implementing memory opcodes'
  code:
    - PUSH32 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20
    - PUSH1 0
    - MSTORE
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20n]

MSTORE (tail):
  hint: 'MLOAD starts from byte offset 31 and picks up the last byte (0x20), the rest of the memory is 00'
  code:
    - PUSH32 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20
    - PUSH1 0
    - MSTORE
    - PUSH1 31
    - MLOAD
  expect:
    stack: [0x2000000000000000000000000000000000000000000000000000000000000000n]

MSTORE8:
  hint: 'Store a single byte at the given offset'
  code:
    - PUSH1 0xff
    - PUSH1 31
    - MSTORE8
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xffn]

MSIZE:
  hint: 'No memory has been accessed, so the memory size is 0'
  code:
    - MSIZE
  expect:
    stack: [0n]

MSIZE (0x20):
  hint: 'The first 32-byte section has been accessed, so the memory size is 32 (0x20)'
  code:
    - PUSH1 0
    - MLOAD
    - POP
    - MSIZE
  expect:
    stack: [0x20n]

MSIZE (0x60):
  hint: 'Memory is measured in 32-byte chunks'
  code:
    - PUSH1 0x39
    - MLOAD
    - POP
    - MSIZE
  expect:
    stack: [0x60n]

MSIZE (after MSTORE8):
  hint: 'Any opcode touching memory should update MSIZE, including the future ones. Implement memory access in a way that automatically updates MSIZE no matter which opcode used it'
  code:
    - PUSH1 0xff
    - PUSH1 0xff
    - MSTORE8
    - MSIZE
  expect:
    stack: [0x100n]

SHA3:
  hint: 'Use an existing library for your programming language. Note that even though the opcode is called SHA3, the algorythm used is keccak256'
  code:
    - PUSH32 0xffffffff00000000000000000000000000000000000000000000000000000000
    - PUSH1 0
    - MSTORE
    - PUSH1 4
    - PUSH1 0
    - SHA3
  expect:
    stack: [0x29045a592007d0c246ef02c2223570da9522d0cf0f73282c79a1bc8f0bb2c238n]

ADDRESS:
  hint: 'Read "Transaction" section of the course learning materials. Change your evm function parameters list to include transaction data'
  tx:
    to: 0x1000000000000000000000000000000000000aaan
  code:
    - ADDRESS
  expect:
    stack: [0x1000000000000000000000000000000000000aaan]

CALLER:
  hint: 'Solidity calls this msg.sender'
  tx:
    from: 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn
  code:
    - CALLER
  expect:
    stack: [0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn]

ORIGIN:
  hint: 'Solidity calls this tx.origin'
  tx:
    origin: 0x1337n
  code:
    - ORIGIN
  expect:
    stack: [0x1337n]

GASPRICE:
  tx:
    gasprice: 0x99n
  code:
    - GASPRICE
  expect:
    stack: [0x99n]

BASEFEE:
  block:
    basefee: 0x1n
  code:
    - BASEFEE
  expect:
    stack: [0x1n]

COINBASE:
  hint: 'Do not hardcode these numbers, pull them from the test cases'
  block:
    coinbase: 0x777n
  code:
    - COINBASE
  expect:
    stack: [0x777n]

COINBASE (different one):
  hint: 'Do not hardcode these numbers, pull them from the test cases'
  block:
    coinbase: 0x888n
  code:
    - COINBASE
  expect:
    stack: [0x888n]

TIMESTAMP:
  hint: 'Solidity calls this block.timestamp'
  block:
    timestamp: 15000001n
  code:
    - TIMESTAMP
  expect:
    stack: [15000001n]

NUMBER:
  hint: 'Solidity calls this block.number'
  block:
    number: 0x1000001n
  code:
    - NUMBER
  expect:
    stack: [0x1000001n]

DIFFICULTY:
  hint: 'Also known as PREVRANDAO, not used in these test cases yet'
  block:
    difficulty: 0x20000n
  code:
    - DIFFICULTY
  expect:
    stack: [0x20000n]

GASLIMIT:
  block:
    gaslimit: 0xffffffffffffn
  code:
    - GASLIMIT
  expect:
    stack: [0xffffffffffffn]

CHAINID:
  block:
    chainid: 1n
  code:
    - CHAINID
  expect:
    stack: [1n]

BLOCKHASH:
  hint: 'Not used in this test suite, can return 0'
  code:
    - PUSH1 0
    - BLOCKHASH
  expect:
    stack: [0x0n]

BALANCE:
  hint: 'Read "State" section of the course learning materials. Modify your evm function to take state as one of the arguments, or turn it into a class'
  state:
    0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn:
      balance: 0x100n
  code:
    - PUSH20 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d
    - BALANCE
  expect:
    stack: [0x100n]

BALANCE (empty):
  hint: 'Balance of accounts not present in state is zero'
  code:
    - PUSH20 0xaf69610ea9ddc95883f97a6a3171d52165b69b03
    - BALANCE
  expect:
    stack: [0n]

CALLVALUE:
  hint: 'Read "Calls" section of the course learning materials. Solidity calls this msg.value, it is amount of wei sent as part of this transaction'
  tx:
    value: 0x1000n
  code:
    - CALLVALUE
  expect:
    stack: [0x1000n]

CALLDATALOAD:
  hint: 'Read "Calls" section of the course learning materials. Calldata is an array of bytes sent to the evm function'
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 0
    - CALLDATALOAD
  expect:
    stack: [0x000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeffn]

CALLDATALOAD (tail):
  hint: 'Overflow bytes filled with zeros'
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 31
    - CALLDATALOAD
  expect:
    stack: [0xff00000000000000000000000000000000000000000000000000000000000000n]

CALLDATASIZE:
  hint: 'Size (in bytes) of calldata buffer'
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - CALLDATASIZE
  expect:
    stack: [32n]

CALLDATASIZE (no data):
  code:
    - CALLDATASIZE
  expect:
    stack: [0n]

CALLDATACOPY:
  hint: 'Copy 32-byte chunk of calldata into memory. Do not forget to update MSIZE after CALLDATACOPY'
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - CALLDATACOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeffn]

CALLDATACOPY (tail):
  hint: 'Overflow bytes filled with zeros'
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - CALLDATACOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xff00000000000000000000000000000000000000000000000000000000000000n]

CODESIZE (small):
  hint: 'Size of the bytecode running in the current context'
  code:
    - CODESIZE # 1 byte
  expect:
    stack: [1n]

CODESIZE:
  code:
    - PUSH20 0 # 21 bytes
    - POP # 1 byte
    - CODESIZE # 1 byte
  expect:
    stack: [23n]

CODECOPY:
  hint: 'Copy your own code into memory. Implementing quines in EVM is really easy'
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - CODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x60_20_60_00_60_00_39_60_00_51_00000000000000000000000000000000000000000000n]

CODECOPY (tail):
  hint: 'Overflow bytes filled with zeros'
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - POP
    - PUSH1 2
    - PUSH1 32
    - PUSH1 0
    - CODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xff_50_000000000000000000000000000000000000000000000000000000000000n]

EXTCODESIZE (empty):
  code:
    - PUSH20 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d
    - EXTCODESIZE
  expect:
    stack: [0n]

EXTCODESIZE:
  hint: 'Read "State" section of the course learning materials'
  state:
    0x1000000000000000000000000000000000000aaan:
      code:
        - PUSH1 1 # 2 bytes
  code:
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODESIZE
  expect:
    stack: [2n]

EXTCODECOPY:
  state:
    0x1000000000000000000000000000000000000aaan:
      code: '6001'
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x60_01_000000000000000000000000000000000000000000000000000000000000n]

EXTCODEHASH:
  hint: 'Use the same library you used for SHA3 opcode'
  state:
    0x1000000000000000000000000000000000000aaan:
      code: 'FFFFFFFF'
  code:
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODEHASH
  expect:
    stack: [0x29045a592007d0c246ef02c2223570da9522d0cf0f73282c79a1bc8f0bb2c238n]

EXTCODEHASH (empty):
  code:
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODEHASH
  expect:
    stack: [0x0n]

SELFBALANCE:
  tx:
    to: 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn
  state:
    0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn:
      balance: 0x200n
  code:
    - SELFBALANCE
  expect:
    stack: [0x200n]

SSTORE:
  hint: 'Read "Storage" section of the course learning materials'
  code:
    - PUSH1 1
    - PUSH1 0
    - SSTORE
    - PUSH1 0
    - SLOAD
  expect:
    stack: [1n]

SSTORE (non-zero location):
  code:
    - PUSH1 2
    - PUSH4 0x98fe5c2c
    - SSTORE
    - PUSH4 0x98fe5c2c
    - SLOAD
  expect:
    stack: [2n]

SLOAD (empty):
  hint: 'All storage is initialized to zeros'
  code:
    - PUSH1 0xff
    - SLOAD
  expect:
    stack: [0n]

LOG0:
  hint: 'Make evm function return array of logs, modify the testing code to assert that the logs match'
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xaa
    - PUSH1 0
    - MSTORE
    - PUSH1 1
    - PUSH1 31
    - LOG0
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'aa'
        topics: []

LOG1:
  hint: 'Make evm function return array of logs, modify the testing code to assert that the logs match'
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xbb
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH1 1
    - PUSH1 31
    - LOG1
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'bb'
        topics:
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

LOG2:
  hint: 'Use the same code to handle LOG1...LOG4 opcodes'
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xcc
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH32 0x2222222222222222222222222222222222222222222222222222222222222222
    - PUSH1 1
    - PUSH1 31
    - LOG2
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'cc'
        topics:
          - 0x2222222222222222222222222222222222222222222222222222222222222222n
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

LOG3:
  hint: 'N = OPCODE - LOG0, pop N items from the stack as topics'
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xdd
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH32 0x2222222222222222222222222222222222222222222222222222222222222222
    - PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
    - PUSH1 1
    - PUSH1 31
    - LOG3
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'dd'
        topics:
          - 0x3333333333333333333333333333333333333333333333333333333333333333n
          - 0x2222222222222222222222222222222222222222222222222222222222222222n
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

LOG4:
  hint: 'Refactoring code is always a good idea. Your code will become cleaner, and the tests will catch if something breaks'
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xee
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH32 0x2222222222222222222222222222222222222222222222222222222222222222
    - PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
    - PUSH32 0x4444444444444444444444444444444444444444444444444444444444444444
    - PUSH1 1
    - PUSH1 31
    - LOG4
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'ee'
        topics:
          - 0x4444444444444444444444444444444444444444444444444444444444444444n
          - 0x3333333333333333333333333333333333333333333333333333333333333333n
          - 0x2222222222222222222222222222222222222222222222222222222222222222n
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

RETURN:
  hint: 'Read "Calls and Returns" section of the course learning materials'
  code:
    - PUSH1 0xA2
    - PUSH1 0
    - MSTORE
    - PUSH1 1
    - PUSH1 31
    - RETURN
  expect:
    success: true
    return: 'a2'

REVERT:
  hint: 'Note that this test expects `success` to be false'
  code:
    - PUSH1 0xF1
    - PUSH1 0
    - MSTORE
    - PUSH1 1
    - PUSH1 31
    - REVERT
  expect:
    success: false
    return: 'f1'

CALL:
  hint: 'Read "Calls and Returns" section of the course learning materials. Recursively call evm function from itself when handing this opcode'
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x42n, 0x1n]

CALL (returns address):
  hint: 'In the inner context, the CALLER is the contract we are sending the initial transaction to'
  tx:
    to: 0x1000000000000000000000000000000000000aaan
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - CALLER
        - PUSH1 0
        - MSTORE
        - PUSH1 32
        - PUSH1 0
        - RETURN
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x1000000000000000000000000000000000000aaan, 0x1n]

CALL (reverts):
  hint: 'Reverts can also return data'
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - REVERT
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x42n, 0x0n]

RETURNDATASIZE (empty):
  code:
    - RETURNDATASIZE
  expect:
    stack: [0x0n]

RETURNDATASIZE:
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - POP
    - RETURNDATASIZE
  expect:
    stack: [0x1n]

RETURNDATACOPY:
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - POP
    - PUSH1 1
    - PUSH1 0
    - PUSH1 0xff
    - RETURNDATACOPY
    - PUSH1 0xff
    - MLOAD
  expect:
    stack: [0x4200000000000000000000000000000000000000000000000000000000000000n]

CALLCODE:
  todo: true

DELEGATECALL:
  hint: 'Like CALL, but keep the transaction data (from, origin, address) and use the code from the other account'
  tx:
    to: 0x1000000000000000000000000000000000000aaan
  state:
    0xddddddddddddddddddddddddddddddddddddddddn:
      code:
        - ADDRESS
        - PUSH1 0
        - SSTORE
  code:
    - PUSH1 0
    - DUP1
    - DUP1
    - DUP1
    - PUSH20 0xdddddddddddddddddddddddddddddddddddddddd
    - GAS
    - DELEGATECALL
    - PUSH1 0
    - SLOAD
  expect:
    stack: [0x1000000000000000000000000000000000000aaan, 1n]

STATICCALL:
  hint: 'Like CALL, but disable state modifications'
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - STATICCALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x42n, 0x1n]

STATICCALL (reverts on write):
  hint: 'Use a flag to tell the evm function whenever the context is writeable (CALL) or not (STATICCALL)'
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - SSTORE
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - STATICCALL
  expect:
    stack: [0x0n]

CREATE (empty):
  hint: 'Read "Creating new contracts" section of the course learning materials. This code creates a new empty account with balance 9'
  tx:
    to: 0x9bbfed6889322e016e0a02ee459d306fc19545d8n
  code:
    - PUSH1 0
    - PUSH1 0
    - PUSH1 9
    - CREATE
    - BALANCE
  expect:
    stack: [9n]

CREATE (with 4x FF):
  hint: 'Read "Creating new contracts" section of the course learning materials. CALL with the given code, store the returned bytes as new contracts bytecode'
  tx:
    to: 0x9bbfed6889322e016e0a02ee459d306fc19545d8n
  code:
    - PUSH1 32 # size for EXTCODECOPY
    - PUSH1 0 # code offset
    - PUSH1 0 # dest offset
    - PUSH13 0x63FFFFFFFF6000526004601CF3
    - PUSH1 0
    - MSTORE
    - PUSH1 13
    - PUSH1 19
    - PUSH1 0
    - CREATE
    - EXTCODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xffffffff00000000000000000000000000000000000000000000000000000000n]

CREATE (reverts):
  hint: 'No address when constructor code reverts'
  tx:
    to: 0x9bbfed6889322e016e0a02ee459d306fc19545d8n
  code:
    - PUSH13 0x63FFFFFFFF6000526004601CFD
    - PUSH1 0
    - MSTORE
    - PUSH1 13
    - PUSH1 19
    - PUSH1 0
    - CREATE
  expect:
    stack: [0n]

CREATE2:
  todo: true

SELFDESTRUCT:
  hint: 'Note that for simplicity, this opcode should delete the account from the state. In the real EVM this happens only after the transaction has been processed, but that would overcomplicate these tests'
  state:
    0xdead00000000000000000000000000000000deadn:
      balance: 0x7n
      code:
        - PUSH20 0xa1c300000000000000000000000000000000a1c3
        - SELFDESTRUCT
  code:
    - PUSH1 0
    - DUP1
    - DUP1
    - DUP1
    - DUP1
    - PUSH20 0xdead00000000000000000000000000000000dead
    - GAS
    - CALL
    - POP
    - PUSH20 0xa1c300000000000000000000000000000000a1c3
    - BALANCE
    - PUSH20 0xdead00000000000000000000000000000000dead
    - EXTCODESIZE
  expect:
    stack: [0x0n, 0x7n]
